#!groovy

srcEnvArray = ['qax', 'stgx']
targetEnvArray = ['stgx', 'prod']

properties([
  parameters([
    choice(choices: '\n' + srcEnvArray.join('\n'), description: 'Source environment', name: 'srcEnv'),
    choice(choices: '\n' + targetEnvArray.join('\n'), description: 'Target environment', name: 'targetEnv')
  ]),
  pipelineTriggers([])
])

srcEnv = env.srcEnv
targetEnv = env.targetEnv

def srcAwsCredentialsId = 'dev-docs-jenkins-' + srcEnv
def s3FromBucket = 'mulesoft-dev-docs-' + srcEnv

def targetAwsCredentialsId = 'dev-docs-jenkins-' + targetEnv
def s3ToBucket = 'mulesoft-dev-docs-' + targetEnv
def cfDistributionId = 'E37QPU2IFJA9X8'


currentBuild.displayName = "${env.BUILD_NUMBER} - (${env.srcEnv}) -> (${env.targetEnv})"

pipeline {
  agent {
    label 'ubuntu-14.04'
  }
  stages {
    stage('Promote') {
      steps {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: targetAwsCredentialsId, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']]) {
          sh "echo ${AWS_ACCESS_KEY_ID} | base64"
          sh "aws s3 sync s3://${s3FromBucket}/ s3://${s3ToBucket}/ --only-show-errors --metadata-directive COPY"
        }
      }
    }
    stage('Invalidate Cache') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: awsCredentialsId, accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
          sh "aws --output text cloudfront create-invalidation --distribution-id ${cfDistributionId} --paths '/*'"
        }
      }
    }
  }
}
